import React, { useEffect, useRef, useState } from 'react';

interface KitesurferIllustrationProps {
  className?: string;
}

export default function KitesurferIllustration({ className = "w-full h-auto" }: KitesurferIllustrationProps) {
  // Reference to SVG elements for animation
  const leftKitesurferRef = useRef<SVGGElement>(null);
  const rightKitesurferRef = useRef<SVGGElement>(null);
  const kiteRef = useRef<SVGPathElement>(null);
  const kite2Ref = useRef<SVGPathElement>(null);
  const wavesRef = useRef<SVGPathElement>(null);
  const cloudsRef = useRef<SVGGElement[]>([]);
  const windLinesRef = useRef<SVGPathElement[]>([]);
  const leftArmRef = useRef<SVGPathElement>(null);
  const rightArmRef = useRef<SVGPathElement>(null);
  const leftLegRef = useRef<SVGPathElement>(null);
  const rightLegRef = useRef<SVGPathElement>(null);
  const rightKitesurferArmsRef = useRef<SVGPathElement[]>([]);
  const rightKitesurferLegsRef = useRef<SVGPathElement[]>([]);
  const splashesRef = useRef<SVGPathElement[]>([]);
  const leftFaceRef = useRef<SVGPathElement>(null);
  const rightFaceRef = useRef<SVGPathElement>(null);
  const sunRef = useRef<SVGCircleElement>(null);
  const waveCrestRef = useRef<SVGPathElement[]>([]);
  
  // State for fun random animations/expressions
  const [doWave, setDoWave] = useState<boolean>(false);
  const [doTrick, setDoTrick] = useState<boolean>(false);
  
  // Animation logic using requestAnimationFrame
  useEffect(() => {
    let frameId: number;
    let angle = 0;
    let wave = 0;
    let trickPhase = 0;
    let lastTrickTime = 0;
    let lastWaveTime = 0;
    
    // Randomize occasional animations
    const triggerRandomAnimations = (timestamp: number) => {
      // Random waving - every 8-12 seconds
      if (timestamp - lastWaveTime > (8000 + Math.random() * 4000)) {
        setDoWave(true);
        setTimeout(() => setDoWave(false), 2000);
        lastWaveTime = timestamp;
      }
      
      // Random trick - every 10-15 seconds
      if (timestamp - lastTrickTime > (10000 + Math.random() * 5000)) {
        setDoTrick(true);
        setTimeout(() => setDoTrick(false), 3000);
        lastTrickTime = timestamp;
      }
    };
    
    // Animation function
    const animate = (timestamp: number) => {
      angle += 0.01;
      wave += 0.02;
      
      // Trigger random fun animations
      triggerRandomAnimations(timestamp);
      
      // Animate waves with ripple effect
      if (wavesRef.current) {
        const waveOffset = Math.sin(wave) * 5;
        wavesRef.current.setAttribute('d', 
          `M0 ${350 + waveOffset} Q50 ${320 + waveOffset}, 100 ${350 + waveOffset} ` + 
          `Q150 ${380 + waveOffset}, 200 ${350 + waveOffset} Q250 ${320 + waveOffset}, ` + 
          `300 ${350 + waveOffset} Q350 ${380 + waveOffset}, 400 ${350 + waveOffset} ` + 
          `Q450 ${320 + waveOffset}, 500 ${350 + waveOffset} Q550 ${380 + waveOffset}, ` + 
          `600 ${350 + waveOffset} Q650 ${320 + waveOffset}, 700 ${350 + waveOffset} ` + 
          `Q750 ${380 + waveOffset}, 800 ${350 + waveOffset}`
        );
      }
      
      // Wave crests animations
      waveCrestRef.current.forEach((waveCrest, i) => {
        if (waveCrest) {
          const offset = Math.sin(wave + i * 0.5) * 5;
          waveCrest.setAttribute('transform', `translate(${Math.sin(wave * 0.5 + i) * 10}, ${offset})`);
        }
      });
      
      // Animate kitesurfers with more dynamic motion
      if (leftKitesurferRef.current) {
        // Basic bobbing motion
        const baseY = Math.sin(angle * 2) * 5;
        // Add slight rotation for balance adjustment
        const rotation = Math.sin(angle) * 2;
        leftKitesurferRef.current.setAttribute('transform', 
          `translate(0, ${baseY}) rotate(${rotation}, 220, 290)`
        );
      }
      
      if (rightKitesurferRef.current) {
        // Different bobbing pattern for second surfer
        const baseY = Math.sin(angle * 2 + 1) * 4;
        // Different rotation pattern
        const rotation = Math.sin(angle + 0.5) * 3;
        rightKitesurferRef.current.setAttribute('transform', 
          `translate(0, ${baseY}) rotate(${rotation}, 450, 295)`
        );
      }
      
      // Animate left surfer arms to control kite
      if (leftArmRef.current) {
        // Slight arm adjustments for kite control
        if (doWave) {
          // Waving animation
          const wavePhase = (timestamp % 1000) / 1000; // 0 to 1
          leftArmRef.current.setAttribute('d', 
            `M220 310 L${180 + Math.sin(wavePhase * Math.PI * 8) * 15} ${330 - Math.cos(wavePhase * Math.PI * 8) * 10}`
          );
        } else if (doTrick) {
          // Strong pull motion for trick
          leftArmRef.current.setAttribute('d', 'M220 310 L190 305');
        } else {
          // Normal control adjustments
          const armAdjust = Math.sin(angle * 3) * 5;
          leftArmRef.current.setAttribute('d', `M220 310 L${180 + armAdjust} ${330 + armAdjust}`);
        }
      }
      
      // Right surfer's arms animations
      rightKitesurferArmsRef.current.forEach((arm, i) => {
        if (arm) {
          if (doWave && i === 1) { // right arm waves
            const wavePhase = (timestamp % 800) / 800; // 0 to 1
            arm.setAttribute('d', 
              `M450 315 L${490 + Math.sin(wavePhase * Math.PI * 8) * 20} ${330 - Math.cos(wavePhase * Math.PI * 8) * 15}`
            );
          } else if (doTrick) {
            // Trick arm positions
            if (i === 0) {
              arm.setAttribute('d', 'M450 315 L420 300'); // pull left
            } else {
              arm.setAttribute('d', 'M450 315 L480 300'); // pull right
            }
          } else {
            // Normal arm movements
            const armAdjust = Math.sin(angle * 3 + i) * 4;
            if (i === 0) { // left arm
              arm.setAttribute('d', `M450 315 L${410 - armAdjust} ${330 + armAdjust}`);
            } else { // right arm
              arm.setAttribute('d', `M450 315 L${490 + armAdjust} ${330 + armAdjust}`);
            }
          }
        }
      });
      
      // Leg animations for balance
      if (leftLegRef.current && rightLegRef.current) {
        if (doTrick) {
          const trickProgress = (timestamp % 3000) / 3000; // 0 to 1 for full trick
          trickPhase = Math.min(trickPhase + 0.01, 1); // Gradual increase
          
          // Trick leg positions - bend more for jump
          leftLegRef.current.setAttribute('d', 
            `M220 350 C${210 - trickPhase * 10} ${365 - trickPhase * 15}, ${200 - trickPhase * 15} 375, ${200 - trickPhase * 10} 380`
          );
          rightLegRef.current.setAttribute('d', 
            `M220 350 C${230 + trickPhase * 10} ${365 - trickPhase * 15}, ${240 + trickPhase * 15} 375, ${240 + trickPhase * 10} 380`
          );
        } else {
          trickPhase = Math.max(trickPhase - 0.03, 0); // Gradual decrease
          
          // Normal leg balancing
          const legAdjust = Math.sin(angle * 2) * 3;
          leftLegRef.current.setAttribute('d', 
            `M220 350 C${210 + legAdjust} ${365 + legAdjust}, ${200 + legAdjust} 375, ${200 + legAdjust} 380`
          );
          rightLegRef.current.setAttribute('d', 
            `M220 350 C${230 - legAdjust} ${365 + legAdjust}, ${240 - legAdjust} 375, ${240 - legAdjust} 380`
          );
        }
      }
      
      // Right kitesurfer legs
      rightKitesurferLegsRef.current.forEach((leg, i) => {
        if (leg) {
          if (doTrick) {
            // Trick leg positions
            if (i === 0) { // left leg
              leg.setAttribute('d', 'M450 350 C435 360, 425 370, 425 380');
            } else { // right leg
              leg.setAttribute('d', 'M450 350 C465 360, 475 370, 475 380');
            }
          } else {
            // Normal leg balancing
            const legAdjust = Math.sin(angle * 2 + i) * 4;
            if (i === 0) { // left leg
              leg.setAttribute('d', `M450 350 C${440 - legAdjust} ${365 + legAdjust}, ${430 - legAdjust} 375, ${430 - legAdjust} 380`);
            } else { // right leg
              leg.setAttribute('d', `M450 350 C${460 + legAdjust} ${365 + legAdjust}, ${470 + legAdjust} 375, ${470 + legAdjust} 380`);
            }
          }
        }
      });
      
      // Face expressions
      if (leftFaceRef.current) {
        if (doWave) {
          // Happy expression when waving
          leftFaceRef.current.setAttribute('d', 'M218 295 C220 298, 222 298, 223 295');
        } else if (doTrick) {
          // Concentrated expression during trick
          leftFaceRef.current.setAttribute('d', 'M218 295 C220 294, 222 294, 223 295');
        } else {
          // Normal smile
          leftFaceRef.current.setAttribute('d', 'M218 295 C220 296, 222 295, 223 295');
        }
      }
      
      if (rightFaceRef.current) {
        if (doWave) {
          // Big smile when waving
          rightFaceRef.current.setAttribute('d', 'M447 302 C450 305, 453 305, 454 302');
        } else if (doTrick) {
          // Focus expression
          rightFaceRef.current.setAttribute('d', 'M447 302 C450 301, 453 301, 454 302');
        } else {
          // Normal expression
          rightFaceRef.current.setAttribute('d', 'M447 302 C450 303, 453 302, 454 301');
        }
      }
      
      // Animate kites with more dynamic movement
      if (kiteRef.current) {
        const baseRotation = Math.sin(angle) * 5;
        // Add extra rotation when doing tricks
        const trickBoost = doTrick ? Math.sin(angle * 10) * 10 : 0;
        kiteRef.current.setAttribute('transform', `rotate(${baseRotation + trickBoost}, 400, 100)`);
      }
      
      if (kite2Ref.current) {
        const baseRotation = Math.sin(angle + 1) * 3;
        // Add extra rotation when doing tricks
        const trickBoost = doTrick ? Math.sin(angle * 8) * 8 : 0;
        kite2Ref.current.setAttribute('transform', `rotate(${baseRotation + trickBoost}, 200, 150)`);
      }
      
      // Water splashes animation - more active during tricks
      splashesRef.current.forEach((splash, i) => {
        if (splash) {
          const baseScale = 1 + Math.sin(angle * 3 + i) * 0.1;
          // More splashing during tricks
          const trickSplash = doTrick ? 0.5 + Math.sin(angle * 10 + i) * 0.5 : 0;
          splash.setAttribute('transform', `scale(${baseScale + trickSplash}) translate(0, ${trickSplash * -5})`);
          
          // Increased opacity during tricks
          const baseOpacity = 0.7 + Math.sin(angle * 2 + i) * 0.3;
          const trickOpacity = doTrick ? 0.2 : 0;
          splash.setAttribute('opacity', `${Math.min(1, baseOpacity + trickOpacity)}`);
        }
      });
      
      // Animate clouds moving slowly across sky
      cloudsRef.current.forEach((cloud, i) => {
        if (cloud) {
          const speed = 0.2 + (i * 0.1);
          // Loop clouds from right to left
          let xPos = -((angle * speed * 10) % 900);
          if (xPos > 0) xPos -= 900; // Ensure clouds start from right edge
          cloud.setAttribute('transform', `translate(${xPos}, ${Math.sin(angle + i) * 3})`);
        }
      });
      
      // Animate sun with subtle pulsing
      if (sunRef.current) {
        const pulseFactor = 1 + Math.sin(angle * 0.5) * 0.05; // 5% size variation
        sunRef.current.setAttribute('r', `${40 * pulseFactor}`);
        
        // Subtle color change
        const hue = 45 + Math.sin(angle * 0.3) * 5; // Yellow hue variation
        sunRef.current.setAttribute('fill', `hsl(${hue}, 90%, 75%)`);
      }
      
      // Animate wind lines fading in and out with movement
      windLinesRef.current.forEach((line, i) => {
        if (line) {
          const opacity = (Math.sin(angle * 3 + i) + 1) / 2;
          line.setAttribute('opacity', opacity.toString());
          
          // Move wind lines slightly
          const xOffset = Math.sin(angle * 2 + i) * 5;
          const yOffset = Math.cos(angle * 2 + i) * 3;
          line.setAttribute('transform', `translate(${xOffset}, ${yOffset})`);
        }
      });
      
      frameId = requestAnimationFrame(animate);
    };
    
    // Start animation
    frameId = requestAnimationFrame(animate);
    
    // Cleanup on unmount
    return () => {
      cancelAnimationFrame(frameId);
    };
  }, [doWave, doTrick]);
  
  // Store refs for animated elements
  const addCloudRef = (el: SVGGElement | null, index: number) => {
    if (el) {
      cloudsRef.current[index] = el;
    }
  };
  
  const addWindLineRef = (el: SVGPathElement | null, index: number) => {
    if (el) {
      windLinesRef.current[index] = el;
    }
  };
  
  const addSplashRef = (el: SVGPathElement | null, index: number) => {
    if (el) {
      splashesRef.current[index] = el;
    }
  };
  
  const addRightArmRef = (el: SVGPathElement | null, index: number) => {
    if (el) {
      rightKitesurferArmsRef.current[index] = el;
    }
  };
  
  const addRightLegRef = (el: SVGPathElement | null, index: number) => {
    if (el) {
      rightKitesurferLegsRef.current[index] = el;
    }
  };
  
  const addWaveCrestRef = (el: SVGPathElement | null, index: number) => {
    if (el) {
      waveCrestRef.current[index] = el;
    }
  };
  
  return (
    <svg
      className={className}
      width="800"
      height="500"
      viewBox="0 0 800 500"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      {/* Background gradient with transparency for blending */}
      <defs>
        <linearGradient id="skyGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="#ecfeff" />
          <stop offset="100%" stopColor="#a5f3fc" stopOpacity="0.3" />
        </linearGradient>
        <linearGradient id="oceanGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stopColor="#0ea5e9" stopOpacity="0.8" />
          <stop offset="100%" stopColor="#0c4a6e" stopOpacity="0.9" />
        </linearGradient>
        <radialGradient id="sunGlow" cx="650" cy="80" r="70" gradientUnits="userSpaceOnUse">
          <stop offset="0%" stopColor="#fef9c3" />
          <stop offset="100%" stopColor="#fef9c3" stopOpacity="0" />
        </radialGradient>
        <filter id="water-texture" x="0" y="0" width="100%" height="100%">
          <feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3" seed="3" />
          <feDisplacementMap in="SourceGraphic" scale="5" />
        </filter>
      </defs>
      
      {/* Sky with gradient - with transparency for blending with page background */}
      <rect width="800" height="350" fill="url(#skyGradient)" fillOpacity="0.7" />
      
      {/* Sun glow effect */}
      <circle cx="650" cy="80" r="70" fill="url(#sunGlow)" />
      
      {/* Sun - with animation */}
      <circle ref={sunRef} cx="650" cy="80" r="40" fill="#fde68a" />
      <circle cx="650" cy="80" r="30" fill="#fef3c7" />
      
      {/* Animated clouds - will move across sky */}
      <g ref={(el) => addCloudRef(el, 0)}>
        <circle cx="150" cy="70" r="20" fill="white" />
        <circle cx="180" cy="60" r="25" fill="white" />
        <circle cx="210" cy="70" r="20" fill="white" />
        <rect x="150" y="70" width="60" height="20" fill="white" />
      </g>
      
      <g ref={(el) => addCloudRef(el, 1)}>
        <circle cx="450" cy="50" r="15" fill="white" />
        <circle cx="480" cy="40" r="20" fill="white" />
        <circle cx="510" cy="50" r="15" fill="white" />
        <rect x="450" y="50" width="60" height="15" fill="white" />
      </g>
      
      <g ref={(el) => addCloudRef(el, 2)}>
        <circle cx="300" cy="120" r="18" fill="white" />
        <circle cx="330" cy="110" r="22" fill="white" />
        <circle cx="360" cy="120" r="18" fill="white" />
        <rect x="300" y="120" width="60" height="18" fill="white" />
      </g>
      
      {/* Ocean with gradient */}
      <path
        d="M0 350 L800 350 L800 500 L0 500 Z"
        fill="url(#oceanGradient)"
      />
      
      {/* Waves with dynamic animation */}
      <path 
        ref={wavesRef}
        d="M0 350 Q50 320, 100 350 Q150 380, 200 350 Q250 320, 300 350 Q350 380, 400 350 Q450 320, 500 350 Q550 380, 600 350 Q650 320, 700 350 Q750 380, 800 350" 
        stroke="white" 
        strokeWidth="3" 
        fill="none" 
      />
      
      {/* Additional wave crests that will move independently */}
      <path 
        ref={(el) => addWaveCrestRef(el, 0)}
        d="M0 370 Q50 340, 100 370 Q150 400, 200 370 Q250 340, 300 370 Q350 400, 400 370 Q450 340, 500 370 Q550 400, 600 370 Q650 340, 700 370 Q750 400, 800 370" 
        stroke="white" 
        strokeWidth="2" 
        fill="none" 
        opacity="0.8"
      />
      <path 
        ref={(el) => addWaveCrestRef(el, 1)}
        d="M0 390 Q50 360, 100 390 Q150 420, 200 390 Q250 360, 300 390 Q350 420, 400 390 Q450 360, 500 390 Q550 420, 600 390 Q650 360, 700 390 Q750 420, 800 390" 
        stroke="white" 
        strokeWidth="1.5" 
        fill="none" 
        opacity="0.6"
      />
      
      {/* Left Kitesurfer with enhanced animations */}
      <g ref={leftKitesurferRef}>
        {/* Kite for left surfer */}
        <path
          ref={kiteRef}
          d="M400 100 C460 60, 520 30, 580 80 C540 130, 440 150, 400 100"
          fill="#0ea5e9"
          stroke="#0c4a6e"
          strokeWidth="3"
        />
        
        {/* Kite strings */}
        <line x1="480" y1="90" x2="220" y2="290" stroke="#475569" strokeWidth="1.5" />
        <line x1="500" y1="90" x2="220" y2="290" stroke="#475569" strokeWidth="1.5" />
        <line x1="520" y1="90" x2="220" y2="290" stroke="#475569" strokeWidth="1.5" />
        
        {/* Surfboard */}
        <ellipse cx="220" cy="380" rx="55" ry="12" fill="#14b8a6" stroke="#0f766e" strokeWidth="2" />
        
        {/* Body */}
        <path
          d="M220 300 C225 330, 215 350, 220 365"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Arms - with animation refs */}
        <path
          ref={leftArmRef}
          d="M220 310 L180 330"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        <path
          ref={rightArmRef}
          d="M220 310 L260 320"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Legs - with animation refs */}
        <path
          ref={leftLegRef}
          d="M220 350 C210 365, 200 375, 200 380"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        <path
          ref={rightLegRef}
          d="M220 350 C230 365, 240 375, 240 380"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Head - more neutral */}
        <circle cx="220" cy="290" r="15" fill="#fcd34d" />
        
        {/* Shaggy hairstyle - more gender neutral */}
        <path
          d="M205 280 C210 275, 215 272, 220 270 C225 272, 230 275, 235 280"
          stroke="#0f172a"
          strokeWidth="2.5"
          fill="none"
        />
        <path
          d="M205 285 C210 282, 215 280, 220 280 C225 280, 230 282, 235 285"
          stroke="#0f172a"
          strokeWidth="1.5"
          fill="none"
        />
        
        {/* Face with dynamic expressions */}
        <path
          d="M210 288 C212 286, 215 286, 218 287"
          stroke="#0f172a"
          strokeWidth="1.5"
          fill="none"
        />
        <path
          d="M222 287 C225 286, 228 286, 230 288"
          stroke="#0f172a"
          strokeWidth="1.5"
          fill="none"
        />
        <path
          ref={leftFaceRef}
          d="M218 295 C220 296, 222 295, 223 295"
          stroke="#0f172a"
          strokeWidth="1.5"
          fill="none"
        />
      </g>
      
      {/* Right Kitesurfer - second person with enhanced animations */}
      <g ref={rightKitesurferRef}>
        {/* Kite for second person */}
        <path
          ref={kite2Ref}
          d="M200 150 C240 120, 280 100, 320 140 C290 180, 230 190, 200 150"
          fill="#f43f5e"
          stroke="#881337"
          strokeWidth="3"
        />
        
        {/* Kite strings */}
        <line x1="240" y1="140" x2="450" y2="300" stroke="#475569" strokeWidth="1.5" />
        <line x1="260" y1="140" x2="450" y2="300" stroke="#475569" strokeWidth="1.5" />
        <line x1="280" y1="140" x2="450" y2="300" stroke="#475569" strokeWidth="1.5" />
        
        {/* Surfboard */}
        <ellipse cx="450" cy="380" rx="55" ry="12" fill="#a855f7" stroke="#7e22ce" strokeWidth="2" />
        
        {/* Body - slightly different pose */}
        <path
          d="M450 310 C445 330, 455 350, 450 365"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Arms - with animation refs */}
        <path
          ref={(el) => addRightArmRef(el, 0)}
          d="M450 315 L410 330"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        <path
          ref={(el) => addRightArmRef(el, 1)}
          d="M450 315 L490 330"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Legs with animation refs */}
        <path
          ref={(el) => addRightLegRef(el, 0)}
          d="M450 350 C440 365, 430 375, 430 380"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        <path
          ref={(el) => addRightLegRef(el, 1)}
          d="M450 350 C460 365, 470 375, 470 380"
          stroke="#0f172a"
          strokeWidth="4"
          fill="none"
        />
        
        {/* Head - different skin tone */}
        <circle cx="450" cy="295" r="15" fill="#d6d3d1" />
        
        {/* Different hairstyle - short hair */}
        <path
          d="M440 280 C445 275, 450 273, 455 275"
          stroke="#0f172a"
          strokeWidth="3"
          fill="none"
        />
        <path
          d="M442 283 C445 280, 450 278, 455 280"
          stroke="#0f172a"
          strokeWidth="2"
          fill="none"
        />
        
        {/* Face with dynamic expressions */}
        <circle cx="445" cy="293" r="2" fill="#0f172a" />
        <circle cx="455" cy="293" r="2" fill="#0f172a" />
        <path
          ref={rightFaceRef}
          d="M447 302 C450 303, 453 302, 454 301"
          stroke="#0f172a"
          strokeWidth="1.5"
          fill="none"
        />
      </g>
      
      {/* Water splashes - now with animation */}
      <path
        ref={(el) => addSplashRef(el, 0)}
        d="M200 380 C195 375, 190 380, 185 375 C180 380, 175 375, 170 380"
        stroke="white"
        strokeWidth="2"
        fill="none"
        opacity="0.8"
      />
      <path
        ref={(el) => addSplashRef(el, 1)}
        d="M240 380 C245 375, 250 380, 255 375 C260 380, 265 375, 270 380"
        stroke="white"
        strokeWidth="2"
        fill="none"
        opacity="0.8"
      />
      <path
        ref={(el) => addSplashRef(el, 2)}
        d="M430 380 C425 375, 420 380, 415 375 C410 380, 405 375, 400 380"
        stroke="white"
        strokeWidth="2"
        fill="none"
        opacity="0.8"
      />
      <path
        ref={(el) => addSplashRef(el, 3)}
        d="M470 380 C475 375, 480 380, 485 375 C490 380, 495 375, 500 380"
        stroke="white"
        strokeWidth="2"
        fill="none"
        opacity="0.8"
      />
      
      {/* New dynamic splash effects for tricks */}
      <path
        ref={(el) => addSplashRef(el, 4)}
        d="M180 380 C170 370, 165 380, 160 370"
        stroke="white"
        strokeWidth="1.5"
        fill="none"
        opacity="0"
      />
      <path
        ref={(el) => addSplashRef(el, 5)}
        d="M260 380 C270 370, 275 380, 280 370"
        stroke="white"
        strokeWidth="1.5"
        fill="none"
        opacity="0"
      />
      <path
        ref={(el) => addSplashRef(el, 6)}
        d="M410 380 C400 370, 395 380, 390 370"
        stroke="white"
        strokeWidth="1.5"
        fill="none"
        opacity="0"
      />
      <path
        ref={(el) => addSplashRef(el, 7)}
        d="M490 380 C500 370, 505 380, 510 370"
        stroke="white"
        strokeWidth="1.5"
        fill="none"
        opacity="0"
      />
      
      {/* Wind lines with enhanced animation */}
      <path
        ref={(el) => addWindLineRef(el, 0)}
        d="M100 150 C120 155, 140 145, 160 150"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      <path
        ref={(el) => addWindLineRef(el, 1)}
        d="M130 180 C150 185, 170 175, 190 180"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      <path
        ref={(el) => addWindLineRef(el, 2)}
        d="M70 220 C90 225, 110 215, 130 220"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      <path
        ref={(el) => addWindLineRef(el, 3)}
        d="M350 120 C370 125, 390 115, 410 120"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      <path
        ref={(el) => addWindLineRef(el, 4)}
        d="M550 180 C570 185, 590 175, 610 180"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      <path
        ref={(el) => addWindLineRef(el, 5)}
        d="M650 220 C670 225, 690 215, 710 220"
        stroke="#94a3b8"
        strokeWidth="2"
        fill="none"
      />
      
      {/* Additional wind line effects */}
      <path
        ref={(el) => addWindLineRef(el, 6)}
        d="M300 200 C320 205, 340 195, 360 200"
        stroke="#94a3b8"
        strokeWidth="1.5"
        fill="none"
        opacity="0.6"
      />
      <path
        ref={(el) => addWindLineRef(el, 7)}
        d="M500 250 C520 255, 540 245, 560 250"
        stroke="#94a3b8"
        strokeWidth="1.5"
        fill="none"
        opacity="0.6"
      />
    </svg>
  );
}